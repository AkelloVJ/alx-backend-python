name: CI

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_messaging_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping -h localhost -uroot -proot"
          --health-interval 10s --health-timeout 5s --health-retries 10

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt || true
          pip install pytest pytest-cov flake8
        working-directory: ./messaging_app

      - name: Wait for MySQL
        run: |
          for i in {1..30}; do
            nc -z 127.0.0.1 3306 && echo "MySQL is up" && break
            echo "Waiting for MySQL..."
            sleep 2
          done

      - name: Set env
        run: |
          echo "DJANGO_SETTINGS_MODULE=messaging_app.settings" >> $GITHUB_ENV
          echo "DEBUG=True" >> $GITHUB_ENV
          echo "ALLOWED_HOSTS=localhost,127.0.0.1,testserver" >> $GITHUB_ENV
          echo "MYSQL_DATABASE=test_messaging_db" >> $GITHUB_ENV
          echo "MYSQL_USER=test_user" >> $GITHUB_ENV
          echo "MYSQL_PASSWORD=test_password" >> $GITHUB_ENV
          echo "MYSQL_HOST=127.0.0.1" >> $GITHUB_ENV
          echo "MYSQL_PORT=3306" >> $GITHUB_ENV

      - name: Run Django tests
        run: |
          python manage.py migrate --run-syncdb
          python manage.py test --verbosity=2
        working-directory: ./messaging_app

      - name: Run flake8
        run: |
          flake8 .
        working-directory: ./messaging_app

      - name: Run pytest with coverage
        run: |
          pytest -q --cov=. --cov-report=xml --cov-report=term-missing
        working-directory: ./messaging_app

      - name: Upload coverage.xml
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: messaging_app/coverage.xml


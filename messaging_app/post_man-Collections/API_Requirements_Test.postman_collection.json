{
	"info": {
		"_postman_id": "b2c3d4e5-f6g7-8901-bcde-f23456789012",
		"name": "API Requirements Test",
		"description": "Test collection specifically for verifying all API requirements including PUT, PATCH, DELETE methods, BasicAuthentication, PageNumberPagination, and filtering",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "87654321"
	},
	"item": [
		{
			"name": "1. Authentication Tests",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('User registration successful', function () {",
									"    pm.response.to.have.status(201);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('access');",
									"    pm.expect(jsonData).to.have.property('refresh');",
									"    pm.expect(jsonData).to.have.property('user');",
									"    ",
									"    // Store tokens and user ID",
									"    pm.environment.set('access_token', jsonData.access);",
									"    pm.environment.set('refresh_token', jsonData.refresh);",
									"    pm.environment.set('user_id', jsonData.user.user_id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"testuser@example.com\",\n    \"password\": \"testpassword123\",\n    \"first_name\": \"Test\",\n    \"last_name\": \"User\",\n    \"phone_number\": \"+1234567890\",\n    \"role\": \"guest\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/register/",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "register", ""]
						}
					}
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('User login successful', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('access');",
									"    pm.expect(jsonData).to.have.property('refresh');",
									"    ",
									"    // Store tokens",
									"    pm.environment.set('access_token', jsonData.access);",
									"    pm.environment.set('refresh_token', jsonData.refresh);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"testuser@example.com\",\n    \"password\": \"testpassword123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login/",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "login", ""]
						}
					}
				}
			]
		},
		{
			"name": "2. BasicAuthentication Test",
			"item": [
				{
					"name": "Test Basic Authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Basic Authentication working', function () {",
									"    // Should work with Basic Auth",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic dGVzdHVzZXJAZXhhbXBsZS5jb206dGVzdHBhc3N3b3JkMTIz"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/conversations/",
							"host": ["{{base_url}}"],
							"path": ["api", "conversations", ""]
						}
					}
				}
			]
		},
		{
			"name": "3. PageNumberPagination Test",
			"item": [
				{
					"name": "Test PageNumberPagination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('PageNumberPagination working', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('count');",
									"    pm.expect(jsonData).to.have.property('next');",
									"    pm.expect(jsonData).to.have.property('previous');",
									"    pm.expect(jsonData).to.have.property('results');",
									"    ",
									"    // Verify pagination structure",
									"    pm.expect(jsonData.results).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/messages/?page=1&page_size=5",
							"host": ["{{base_url}}"],
							"path": ["api", "messages", ""],
							"query": [
								{"key": "page", "value": "1"},
								{"key": "page_size", "value": "5"}
							]
						}
					}
				}
			]
		},
		{
			"name": "4. PUT Method Tests",
			"item": [
				{
					"name": "Create Conversation for PUT Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Conversation created for PUT test', function () {",
									"    pm.response.to.have.status(201);",
									"    const jsonData = pm.response.json();",
									"    pm.environment.set('conversation_id', jsonData.conversation_id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"participants_id\": \"{{user_id}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/conversations/",
							"host": ["{{base_url}}"],
							"path": ["api", "conversations", ""]
						}
					}
				},
				{
					"name": "Test PUT Method - Conversation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('PUT method working for conversation', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('conversation_id');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"participants_id\": \"{{user_id}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/conversations/{{conversation_id}}/",
							"host": ["{{base_url}}"],
							"path": ["api", "conversations", "{{conversation_id}}", ""]
						}
					}
				},
				{
					"name": "Create Message for PUT Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Message created for PUT test', function () {",
									"    pm.response.to.have.status(201);",
									"    const jsonData = pm.response.json();",
									"    pm.environment.set('message_id', jsonData.message_id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"conversation\": \"{{conversation_id}}\",\n    \"message_body\": \"Test message for PUT method\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/messages/",
							"host": ["{{base_url}}"],
							"path": ["api", "messages", ""]
						}
					}
				},
				{
					"name": "Test PUT Method - Message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('PUT method working for message', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message_id');",
									"    pm.expect(jsonData.message_body).to.eql('Updated message via PUT');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"conversation\": \"{{conversation_id}}\",\n    \"message_body\": \"Updated message via PUT\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/messages/{{message_id}}/",
							"host": ["{{base_url}}"],
							"path": ["api", "messages", "{{message_id}}", ""]
						}
					}
				}
			]
		},
		{
			"name": "5. PATCH Method Tests",
			"item": [
				{
					"name": "Test PATCH Method - Conversation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('PATCH method working for conversation', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('conversation_id');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"participants_id\": \"{{user_id}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/conversations/{{conversation_id}}/",
							"host": ["{{base_url}}"],
							"path": ["api", "conversations", "{{conversation_id}}", ""]
						}
					}
				},
				{
					"name": "Test PATCH Method - Message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('PATCH method working for message', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message_id');",
									"    pm.expect(jsonData.message_body).to.eql('Updated message via PATCH');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"message_body\": \"Updated message via PATCH\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/messages/{{message_id}}/",
							"host": ["{{base_url}}"],
							"path": ["api", "messages", "{{message_id}}", ""]
						}
					}
				}
			]
		},
		{
			"name": "6. DELETE Method Tests",
			"item": [
				{
					"name": "Test DELETE Method - Message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('DELETE method working for message', function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/messages/{{message_id}}/",
							"host": ["{{base_url}}"],
							"path": ["api", "messages", "{{message_id}}", ""]
						}
					}
				},
				{
					"name": "Test DELETE Method - Conversation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('DELETE method working for conversation', function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/conversations/{{conversation_id}}/",
							"host": ["{{base_url}}"],
							"path": ["api", "conversations", "{{conversation_id}}", ""]
						}
					}
				}
			]
		},
		{
			"name": "7. MessageFilter Tests",
			"item": [
				{
					"name": "Create Test Data for Filtering",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test data created', function () {",
									"    pm.response.to.have.status(201);",
									"    const jsonData = pm.response.json();",
									"    pm.environment.set('conversation_id', jsonData.conversation_id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"participants_id\": \"{{user_id}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/conversations/",
							"host": ["{{base_url}}"],
							"path": ["api", "conversations", ""]
						}
					}
				},
				{
					"name": "Create Messages for Filtering",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Messages created for filtering', function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"conversation\": \"{{conversation_id}}\",\n    \"message_body\": \"Work related message about project deadline\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/messages/",
							"host": ["{{base_url}}"],
							"path": ["api", "messages", ""]
						}
					}
				},
				{
					"name": "Test MessageFilter by Content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('MessageFilter by content working', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('count');",
									"    pm.expect(jsonData).to.have.property('results');",
									"    ",
									"    // Check if filtering worked",
									"    if (jsonData.results.length > 0) {",
									"        pm.expect(jsonData.results[0].message_body).to.include('work');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/messages/?message_contains=work",
							"host": ["{{base_url}}"],
							"path": ["api", "messages", ""],
							"query": [
								{"key": "message_contains", "value": "work"}
							]
						}
					}
				},
				{
					"name": "Test MessageFilter by Sender",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('MessageFilter by sender working', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('count');",
									"    pm.expect(jsonData).to.have.property('results');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/messages/?sender={{user_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "messages", ""],
							"query": [
								{"key": "sender", "value": "{{user_id}}"}
							]
						}
					}
				},
				{
					"name": "Test MessageFilter by Date Range",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('MessageFilter by date range working', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('count');",
									"    pm.expect(jsonData).to.have.property('results');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/messages/?sent_after=2024-01-01T00:00:00Z&sent_before=2024-12-31T23:59:59Z",
							"host": ["{{base_url}}"],
							"path": ["api", "messages", ""],
							"query": [
								{"key": "sent_after", "value": "2024-01-01T00:00:00Z"},
								{"key": "sent_before", "value": "2024-12-31T23:59:59Z"}
							]
						}
					}
				}
			]
		},
		{
			"name": "8. Permission Tests",
			"item": [
				{
					"name": "Test Unauthorized Access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Unauthorized access properly denied', function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/conversations/",
							"host": ["{{base_url}}"],
							"path": ["api", "conversations", ""]
						}
					}
				},
				{
					"name": "Test Cross-User Access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Cross-user access properly denied', function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{other_user_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/conversations/{{conversation_id}}/",
							"host": ["{{base_url}}"],
							"path": ["api", "conversations", "{{conversation_id}}", ""]
						}
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Set base URL if not already set",
					"if (!pm.environment.get('base_url')) {",
					"    pm.environment.set('base_url', 'http://127.0.0.1:8000');",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://127.0.0.1:8000",
			"type": "string"
		}
	]
}
